# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Attestation {
  attestation: JSON
  attestation_uid: ID
  attester_address: String
  block_timestamp: BigInt
  hypercerts: [Hypercert!]
  id: ID
  recipient_address: String
  resolver: String
  schema: String
  supported_schemas_id: ID
}

input AttestationFetchInput {
  by: AttestationSortOptions
  order: SortOrder
}

type AttestationSchema {
  chain_id: BigInt
  eas_schema_id: ID
  id: ID
  records: [Attestation!]
  resolver: String
  revocable: Boolean
  schema: String
}

input AttestationSchemaFetchInput {
  by: AttestationSchemaSortOptions
  order: SortOrder
}

"""Keys to sort attestation schemas by"""
enum AttestationSchemaSortKeys {
  resolver
  schema_id
}

input AttestationSchemaSortOptions {
  schema: AttestationSchemaSortKeys
}

input AttestationSchemaWhereInput {
  chain_id: NumberSearchOptions
  eas_schema_id: StringSearchOptions
  id: StringSearchOptions
  resolver: StringSearchOptions
  revocable: BooleanSearchOptions
  schema: StringSearchOptions
}

"""Keys to sort attestations by"""
enum AttestationSortKeys {
  attestation_id
  attestation_uid
  attester_address
  block_timestamp
  recipient_address
  schema
  supported_schemas_id
}

input AttestationSortOptions {
  attestation: AttestationSortKeys
}

input AttestationWhereInput {
  attestation: StringSearchOptions
  attestation_uid: StringSearchOptions
  attester_address: StringSearchOptions
  block_timestamp: NumberSearchOptions
  chain_id: NumberSearchOptions
  contract_address: StringSearchOptions
  id: StringSearchOptions
  recipient_address: StringSearchOptions
  resolver: StringSearchOptions
  schema: StringSearchOptions
  supported_schemas_id: StringSearchOptions
  token_id: StringSearchOptions
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt

input BooleanSearchOptions {
  eq: Boolean
}

type Contract {
  chain_id: BigInt
  contract_address: String
  id: ID
  start_block: BigInt
}

input ContractFetchInput {
  by: ContractSortOptions
  order: SortOrder
}

"""Keys to sort contracts by"""
enum ContractSortKeys {
  chain_id
  contract_address
  contract_id
}

input ContractSortOptions {
  contracts: ContractSortKeys
}

input ContractWhereInput {
  chain_id: NumberSearchOptions
  contract_address: StringSearchOptions
  id: StringSearchOptions
}

"""Count keys for the count query"""
enum CountKeys {
  """
  Count the number of items in the query and return it along with the data
  """
  COUNT

  """Only get the count, not the data"""
  HEAD
}

"""Handles uint256 bigint values stored in DB"""
scalar EthBigInt

type Fraction {
  claims_id: ID
  creation_block_timestamp: BigInt
  hypercert_id: String
  id: ID!
  last_block_update_timestamp: BigInt
  owner_address: String
  units: EthBigInt
}

input FractionFetchInput {
  by: String
  order: String
}

input FractionWhereInput {
  claims_id: StringSearchOptions
  creation_block_timestamp: NumberSearchOptions
  hypercert_id: StringSearchOptions
  last_block_update_timestamp: NumberSearchOptions
  owner_address: StringSearchOptions
  token_id: NumberSearchOptions
  units: NumberSearchOptions
}

type GetAttestationsResponse {
  data: [Attestation!]!
  totalCount: Int!
}

type GetHypercertsResponse {
  data: [Hypercert!]!
  totalCount: Int!
}

type Hypercert {
  attestations: GetAttestationsResponse
  contracts: Contract
  contracts_id: String
  creation_block_timestamp: BigInt
  fractions: [Fraction!]
  hypercert_id: String
  id: ID
  last_block_update_timestamp: BigInt
  metadata: Metadata
  owner_address: String
  token_id: EthBigInt
  type: String
  units: EthBigInt
  uri: String
}

input HypercertFetchInput {
  by: HypercertSortOptions
  order: SortOrder
}

"""Keys to sort hypercerts by"""
enum HypercertSortKeys {
  creation_block_timestamp
  hypercert_id
  token_id
}

input HypercertSortOptions {
  contracts: ContractSortKeys
  hypercert: HypercertSortKeys
  metadata: MetadataSortKeys
}

input HypercertsWhereInput {
  attestations: AttestationWhereInput
  contracts: ContractWhereInput
  creation_block_timestamp: StringSearchOptions
  fractions: FractionWhereInput
  hypercert_id: StringSearchOptions
  metadata: MetadataWhereInput
  token_id: NumberSearchOptions
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Metadata {
  allow_list_uri: String
  contributors: [String!]
  description: String
  external_url: String
  id: ID
  image: String
  impact_scope: [String!]
  impact_timeframe_from: BigInt
  impact_timeframe_to: BigInt
  name: String
  properties: JSON
  rights: [String!]
  uri: String
  work_scope: [String!]
  work_timeframe_from: BigInt
  work_timeframe_to: BigInt
}

input MetadataFetchInput {
  by: MetadataSortOptions
  order: SortOrder
}

"""Keys to sort metadata by"""
enum MetadataSortKeys {
  allowList
  description
  metadata_id
  name
}

input MetadataSortOptions {
  metadata: MetadataSortKeys
}

input MetadataWhereInput {
  contributors: StringArraySearchOptions
  description: StringSearchOptions
  impact_scope: StringArraySearchOptions
  name: StringSearchOptions
  uri: StringSearchOptions
  work_scope: StringArraySearchOptions
}

input NumberSearchOptions {
  eq: BigInt
  gt: BigInt
  gte: BigInt
  lt: BigInt
  lte: BigInt
}

type Query {
  attestationSchemas(count: CountKeys, first: Int, limit: Int, offset: Int, sort: AttestationSchemaFetchInput, where: AttestationSchemaWhereInput): [AttestationSchema!]!
  attestations(count: CountKeys, first: Int, limit: Int, offset: Int, sort: AttestationFetchInput, where: AttestationWhereInput): GetAttestationsResponse!
  contracts(count: CountKeys, first: Int, limit: Int, offset: Int, sort: ContractFetchInput, where: ContractWhereInput): [Contract!]!
  fractions(count: CountKeys, first: Int, limit: Int, offset: Int, sort: FractionFetchInput, where: FractionWhereInput): [Fraction!]!
  hypercerts(count: CountKeys, first: Int, limit: Int, offset: Int, sort: HypercertFetchInput, where: HypercertsWhereInput): GetHypercertsResponse!
  metadata(count: CountKeys, first: Int, limit: Int, offset: Int, sort: MetadataFetchInput, where: MetadataWhereInput): [Metadata!]!
}

"""The direction to sort the query results"""
enum SortOrder {
  """Ascending order"""
  ascending

  """Descending order"""
  descending
}

input StringArraySearchOptions {
  contains: [String!]
}

input StringSearchOptions {
  contains: String
  endsWith: String
  eq: String
  startsWith: String
}