# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Attestation {
  attestation: JSON
  attestation_uid: ID
  attester_address: String
  block_timestamp: BigInt
  hypercerts: [Hypercert!]
  id: ID
  recipient_address: String
  resolver: String
  schema: String
  supported_schemas_id: ID
}

input AttestationFetchInput {
  limit: Int = 100
  offset: Int = 0
}

type AttestationSchema {
  chain_id: BigInt
  eas_schema_id: ID
  id: ID
  records: [Attestation!]
  resolver: String
  revocable: Boolean
  schema: String
}

input AttestationSchemaFetchInput {
  limit: Int = 100
  offset: Int = 0
}

input AttestationSchemaWhereInput {
  chain_id: NumberSearchOptions
  eas_schema_id: StringSearchOptions
  id: StringSearchOptions
  resolver: StringSearchOptions
  revocable: BooleanSearchOptions
  schema: StringSearchOptions
}

input AttestationWhereInput {
  attestation: StringSearchOptions
  attestation_uid: StringSearchOptions
  attester_address: StringSearchOptions
  block_timestamp: NumberSearchOptions
  chain_id: NumberSearchOptions
  contract_address: StringSearchOptions
  id: StringSearchOptions
  recipient_address: StringSearchOptions
  resolver: StringSearchOptions
  schema: StringSearchOptions
  supported_schemas_id: StringSearchOptions
  token_id: StringSearchOptions
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt

input BooleanSearchOptions {
  eq: Boolean
}

type Contract {
  chain_id: BigInt
  contract_address: String
  id: ID
  start_block: BigInt
}

input ContractFetchInput {
  from: Int = 0
  limit: Int = 1000
  to: Int = 1000
}

input ContractWhereInput {
  chain_id: NumberSearchOptions
  contract_address: StringSearchOptions
  id: StringSearchOptions
}

type Fraction {
  claims_id: ID
  creation_block_timestamp: BigInt
  hypercert_id: String
  id: ID!
  last_block_update_timestamp: BigInt
  owner_address: String
  units: String
}

input FractionFetchInput {
  limit: Int = 100
  offset: Int = 0
}

input FractionWhereInput {
  claims_id: StringSearchOptions
  creation_block_timestamp: NumberSearchOptions
  hypercert_id: StringSearchOptions
  last_block_update_timestamp: NumberSearchOptions
  owner_address: StringSearchOptions
  token_id: NumberSearchOptions
  units: NumberSearchOptions
}

type GetAttestationsResponse {
  data: [Attestation!]!
  totalCount: Int!
}

type GetHypercertsResponse {
  data: [Hypercert!]!
  totalCount: Int!
}

type Hypercert {
  attestations: GetAttestationsResponse
  contract: Contract
  contracts_id: String
  creation_block_timestamp: BigInt
  fractions: [Fraction!]
  hypercert_id: String
  id: ID
  last_block_update_timestamp: BigInt
  metadata: Metadata
  owner_address: String
  token_id: String
  type: String
  units: String
  uri: String
}

input HypercertFetchInput {
  limit: Int = 100
  offset: Int = 0
}

input HypercertsWhereInput {
  attestations: AttestationWhereInput
  contract: ContractWhereInput
  creation_block_timestamp: NumberSearchOptions
  fractions: FractionWhereInput
  hypercert_id: StringSearchOptions
  token_id: NumberSearchOptions
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Metadata {
  allow_list_uri: String
  contributors: [String!]
  description: String
  external_url: String
  id: ID
  image: String
  impact_scope: [String!]
  impact_timeframe_from: BigInt
  impact_timeframe_to: BigInt
  name: String
  properties: String
  rights: [String!]
  uri: String
  work_scope: [String!]
  work_timeframe_from: BigInt
  work_timeframe_to: BigInt
}

input MetadataFetchInput {
  limit: Int = 100
  offset: Int = 0
}

input MetadataWhereInput {
  contributors: StringArraySearchOptions
  description: StringSearchOptions
  impact_scope: StringArraySearchOptions
  name: StringSearchOptions
  uri: StringSearchOptions
  work_scope: StringArraySearchOptions
}

input NumberSearchOptions {
  eq: BigInt
  gt: BigInt
  gte: BigInt
  lt: BigInt
  lte: BigInt
}

type Query {
  attestationSchemas(page: AttestationSchemaFetchInput, where: AttestationSchemaWhereInput): [AttestationSchema!]!
  attestations(page: AttestationFetchInput, where: AttestationWhereInput): GetAttestationsResponse!
  contracts(page: ContractFetchInput, where: ContractWhereInput): [Contract!]!
  fractions(page: FractionFetchInput, where: FractionWhereInput): [Fraction!]!
  hypercerts(page: HypercertFetchInput, where: HypercertsWhereInput): GetHypercertsResponse!
  metadata(page: MetadataFetchInput, where: MetadataWhereInput): [Metadata!]!
}

input StringArraySearchOptions {
  contains: [String!]
}

input StringSearchOptions {
  contains: String
  endsWith: String
  eq: String
  startsWith: String
}