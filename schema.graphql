# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt

type Contract {
  chain_id: BigInt
  contract_address: String
  id: ID
  start_block: BigInt
  tokens: [Token!]
}

input ContractFetchInput {
  limit: Int = 100
  offset: Int = 0
}

input ContractWhereInput {
  chain_id: NumberSearchOptions
  contract_address: StringSearchOptions
  id: StringSearchOptions
}

type Hypercert {
  contract: Contract
  contracts_id: String
  creation_block_timestamp: BigInt
  hypercert_id: String
  id: ID
  last_block_update_timestamp: BigInt
  metadata: Metadata
  owner_address: String
  token_id: String
  type: String
  units: String
  uri: String
}

input HypercertFetchInput {
  limit: Int = 100
  offset: Int = 0
}

input HypercertsWhereInput {
  creation_block_timestamp: NumberSearchOptions
  hypercert_id: StringSearchOptions
  token_id: NumberSearchOptions
}

type Metadata {
  allow_list_uri: String
  contributors: [String!]
  description: String
  external_url: String
  id: ID
  image: String
  impact_scope: [String!]
  impact_timeframe_from: BigInt
  impact_timeframe_to: BigInt
  name: String
  properties: String
  rights: [String!]
  uri: String
  work_scope: [String!]
  work_timeframe_from: BigInt
  work_timeframe_to: BigInt
}

input MetadataFetchInput {
  limit: Int = 100
  offset: Int = 0
}

input MetadataWhereInput {
  contributors: StringArraySearchOptions
  description: StringSearchOptions
  impact_scope: StringArraySearchOptions
  name: StringSearchOptions
  uri: StringSearchOptions
  work_scope: StringArraySearchOptions
}

input NumberSearchOptions {
  eq: BigInt
  gt: BigInt
  gte: BigInt
  lt: BigInt
  lte: BigInt
}

type Query {
  contracts(page: ContractFetchInput, where: ContractWhereInput): [Contract!]!
  hypercerts(page: HypercertFetchInput, where: HypercertsWhereInput): [Hypercert!]!
  metadata(page: MetadataFetchInput, where: MetadataWhereInput): [Metadata!]!
  tokens: [Token!]!
}

input StringArraySearchOptions {
  contains: [String!]
}

input StringSearchOptions {
  contains: String
  endsWith: String
  eq: String
  startsWith: String
}

type Token {
  contracts_id: ID
  id: ID!
  owner_address: String
  units: String
}